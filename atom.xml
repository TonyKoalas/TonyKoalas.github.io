<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Tony威</title>
  
  <subtitle>会做饭的程序员</subtitle>
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2021-05-19T17:34:17.000Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>tony</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title></title>
    <link href="http://example.com/2021/05/19/go%E5%9F%BA%E7%A1%80/04defer/"/>
    <id>http://example.com/2021/05/19/go%E5%9F%BA%E7%A1%80/04defer/</id>
    <published>2021-05-19T17:35:42.860Z</published>
    <updated>2021-05-19T17:34:17.000Z</updated>
    
    <content type="html"><![CDATA[<img src="https://gimg2.baidu.com/image_search/src=http%3A%2F%2Fimg-blog.csdnimg.cn%2Fimg_convert%2Fb57c9724cf9167764d0eaf2abc402031.png&refer=http%3A%2F%2Fimg-blog.csdnimg.cn&app=2002&size=f9999,10000&q=a80&n=0&g=0n&fmt=jpeg?sec=1623949493&t=362c1a0f03eb1f6eee0a66d2076fe3fe" width="400px" height="150px" style="box-shadow: 0 0 0px"><ol><li>defer是什么？<figure class="highlight"><table><tr><td class="code"><pre><code class="hljs">延迟执行,后进先出<br></code></pre></td></tr></table></figure></li><li>defer的执行时机:<figure class="highlight go"><table><tr><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">return</span>语句在底层并不是原子操作，分给返回值赋值和RET指令两步；<br><span class="hljs-keyword">defer</span>语句在<span class="hljs-number">2</span>者之间执行。<br></code></pre></td></tr></table></figure></li><li>Demo：<figure class="highlight awk"><table><tr><td class="code"><pre><code class="hljs awk"><span class="hljs-regexp">//</span>函数没有声明返回值变量：<br><span class="hljs-regexp">//</span> <span class="hljs-number">1</span>.先给返回值开辟一个空间存了一份<span class="hljs-number">5</span>，作为返回值;<br><span class="hljs-regexp">//</span> <span class="hljs-number">2</span>.defer修改x<br><span class="hljs-regexp">//</span> <span class="hljs-number">3</span>.执行ret指令，返回返回值<br><span class="hljs-keyword">func</span> d1() int&#123;<br>   x := <span class="hljs-number">5</span><br>   defer <span class="hljs-keyword">func</span>() &#123;<br>       x++ <span class="hljs-regexp">//</span>修改的是x，但是返回值不是x<br>   &#125;()<br>   return x <span class="hljs-regexp">//</span><span class="hljs-number">1</span>.返回值赋值 <span class="hljs-number">2</span>.defer <span class="hljs-number">3</span>.<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="code"><pre><code class="hljs go"><span class="hljs-comment">//函数声明返回值变量：</span><br><span class="hljs-comment">// 1.声明已经给返回值x开辟了空间，赋值返回值x=5;</span><br><span class="hljs-comment">// 2.defer修改x，x=6</span><br><span class="hljs-comment">// 3.执行ret指令，返回返回值x=6</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">d2</span><span class="hljs-params">()</span> <span class="hljs-params">(x <span class="hljs-keyword">int</span>)</span></span>&#123;<br>   <span class="hljs-keyword">defer</span> <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">()</span></span> &#123;<br>       x++<br>   &#125;()<br>   <span class="hljs-keyword">return</span> <span class="hljs-number">5</span> <span class="hljs-comment">//返回值是x = 6</span><br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="code"><pre><code class="hljs go"><span class="hljs-comment">//函数声明返回值变量：</span><br><span class="hljs-comment">// 1.声明已经给返回值y开辟了空间，赋值返回值y=5;</span><br><span class="hljs-comment">// 2.defer修改x，x=6</span><br><span class="hljs-comment">// 3.执行ret指令，返回返回值y=5</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">d3</span><span class="hljs-params">()</span> <span class="hljs-params">(y <span class="hljs-keyword">int</span>)</span></span>&#123;<br>   x := <span class="hljs-number">5</span><br>   <span class="hljs-keyword">defer</span> <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">()</span></span> &#123;<br>       x++ <span class="hljs-comment">//修改的是x</span><br>   &#125;()<br>   <span class="hljs-keyword">return</span> x <span class="hljs-comment">//返回值 = y = x = 5</span><br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="code"><pre><code class="hljs go"><span class="hljs-comment">//函数声明返回值变量：</span><br><span class="hljs-comment">// 1.声明已经给返回值x开辟了空间，赋值返回值x=5;</span><br><span class="hljs-comment">// 2.defer修改x的副本，x副本=6</span><br><span class="hljs-comment">// 3.执行ret指令，返回返回值y=5</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">d4</span><span class="hljs-params">()</span> <span class="hljs-params">(x <span class="hljs-keyword">int</span>)</span></span>&#123;<br>   <span class="hljs-keyword">defer</span> <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(x <span class="hljs-keyword">int</span>)</span></span> &#123;<br>       x++ <span class="hljs-comment">//改变的是函数中x的副本</span><br>   &#125;(x)<br>   <span class="hljs-keyword">return</span> <span class="hljs-number">5</span> <span class="hljs-comment">//返回值 = x = 5</span><br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="code"><pre><code class="hljs go"><span class="hljs-comment">//函数声明返回值变量名：</span><br><span class="hljs-comment">// 1.声明已经给返回值x开辟了空间，赋值返回值x=5;</span><br><span class="hljs-comment">// 2.defer 根据指针地址来修改x，x=6</span><br><span class="hljs-comment">// 3.执行ret指令，返回返回值x=6</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">d5</span><span class="hljs-params">()</span> <span class="hljs-params">(x <span class="hljs-keyword">int</span>)</span></span>&#123;<br>   <span class="hljs-keyword">defer</span> <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(x *<span class="hljs-keyword">int</span>)</span></span> &#123;<br>       (*x)++ <span class="hljs-comment">//改变的是函数中x的副本</span><br>   &#125;(&amp;x)<br>   <span class="hljs-keyword">return</span> <span class="hljs-number">5</span> <span class="hljs-comment">//返回值 = x = 6</span><br>&#125;<br></code></pre></td></tr></table></figure></li><li>面试题：<figure class="highlight awk"><table><tr><td class="code"><pre><code class="hljs awk"><span class="hljs-keyword">func</span> calc(index string, a, b int) int &#123;<br>   ret := a + b<br>   fmt.Println(index, a, b, ret)<br>   return ret<br>&#125;<br><span class="hljs-keyword">func</span> main()  &#123;<br>   a := <span class="hljs-number">1</span><br>   b := <span class="hljs-number">2</span><br>   defer  calc(<span class="hljs-string">&quot;1&quot;</span>, a, calc(<span class="hljs-string">&quot;10&quot;</span>, a, b))<br>   a = <span class="hljs-number">0</span><br>   defer  calc(<span class="hljs-string">&quot;2&quot;</span>, a, calc(<span class="hljs-string">&quot;20&quot;</span>, a, b))<br>   b = <span class="hljs-number">1</span><br>&#125;<br><span class="hljs-regexp">//</span>解题分析<br><span class="hljs-regexp">//</span><span class="hljs-number">1</span>. a:=<span class="hljs-number">1</span><br><span class="hljs-regexp">//</span><span class="hljs-number">2</span>. b:=<span class="hljs-number">2</span><br><span class="hljs-regexp">//</span><span class="hljs-number">3</span>. defer  calc(<span class="hljs-string">&quot;1&quot;</span>, <span class="hljs-number">1</span>, calc(<span class="hljs-string">&quot;10&quot;</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>))<br><span class="hljs-regexp">//</span><span class="hljs-number">4</span>. calc(<span class="hljs-string">&quot;10&quot;</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>) <span class="hljs-regexp">//</span> 打印 <span class="hljs-string">&quot;10&quot;</span> <span class="hljs-number">1</span> <span class="hljs-number">2</span> <span class="hljs-number">3</span><br><span class="hljs-regexp">//</span><span class="hljs-number">5</span>. defer  calc(<span class="hljs-string">&quot;1&quot;</span>, <span class="hljs-number">1</span>, <span class="hljs-number">3</span>)<br><span class="hljs-regexp">//</span><span class="hljs-number">6</span>. a=<span class="hljs-number">0</span><br><span class="hljs-regexp">//</span><span class="hljs-number">7</span>. defer  calc(<span class="hljs-string">&quot;2&quot;</span>, <span class="hljs-number">0</span>, calc(<span class="hljs-string">&quot;20&quot;</span>, <span class="hljs-number">0</span>, <span class="hljs-number">2</span>))<br><span class="hljs-regexp">//</span><span class="hljs-number">8</span>. calc(<span class="hljs-string">&quot;20&quot;</span>, <span class="hljs-number">0</span>, <span class="hljs-number">2</span> <span class="hljs-regexp">//</span> 打印 <span class="hljs-string">&quot;20&quot;</span> <span class="hljs-number">0</span> <span class="hljs-number">2</span> <span class="hljs-number">2</span><br><span class="hljs-regexp">//</span><span class="hljs-number">9</span>. defer  calc(<span class="hljs-string">&quot;2&quot;</span>, <span class="hljs-number">0</span>, <span class="hljs-number">2</span>)<br><span class="hljs-regexp">//</span><span class="hljs-number">10</span>.b=<span class="hljs-number">1</span><br><span class="hljs-regexp">//</span><span class="hljs-number">11</span>.calc(<span class="hljs-string">&quot;2&quot;</span>, <span class="hljs-number">0</span>, <span class="hljs-number">2</span>) <span class="hljs-regexp">//</span> 打印 <span class="hljs-string">&quot;2&quot;</span> <span class="hljs-number">0</span> <span class="hljs-number">2</span> <span class="hljs-number">2</span><br><span class="hljs-regexp">//</span><span class="hljs-number">12</span>.calc(<span class="hljs-string">&quot;1&quot;</span>, <span class="hljs-number">1</span>, <span class="hljs-number">3</span>) <span class="hljs-regexp">//</span> 打印 <span class="hljs-string">&quot;1&quot;</span> <span class="hljs-number">1</span> <span class="hljs-number">3</span> <span class="hljs-number">4</span><br>/*最终结果为<br>  <span class="hljs-string">&quot;10&quot;</span> <span class="hljs-number">1</span> <span class="hljs-number">2</span> <span class="hljs-number">3</span><br>  <span class="hljs-string">&quot;20&quot;</span> <span class="hljs-number">0</span> <span class="hljs-number">2</span> <span class="hljs-number">2</span><br>  <span class="hljs-string">&quot;2&quot;</span> <span class="hljs-number">0</span> <span class="hljs-number">2</span> <span class="hljs-number">2</span><br>  <span class="hljs-string">&quot;1&quot;</span> <span class="hljs-number">1</span> <span class="hljs-number">3</span> <span class="hljs-number">4</span><br>*/<br></code></pre></td></tr></table></figure></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;img src=&quot;https://gimg2.baidu.com/image_search/src=http%3A%2F%2Fimg-blog.csdnimg.cn%2Fimg_convert%2Fb57c9724cf9167764d0eaf2abc402031.png&amp;ref</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Go-闭包</title>
    <link href="http://example.com/2021/05/18/go%E5%9F%BA%E7%A1%80/03%E9%97%AD%E5%8C%85/"/>
    <id>http://example.com/2021/05/18/go%E5%9F%BA%E7%A1%80/03%E9%97%AD%E5%8C%85/</id>
    <published>2021-05-18T14:33:36.000Z</published>
    <updated>2021-05-19T12:36:21.008Z</updated>
    
    <content type="html"><![CDATA[<img src="https://gimg2.baidu.com/image_search/src=http%3A%2F%2Fimg-blog.csdnimg.cn%2Fimg_convert%2Fb57c9724cf9167764d0eaf2abc402031.png&refer=http%3A%2F%2Fimg-blog.csdnimg.cn&app=2002&size=f9999,10000&q=a80&n=0&g=0n&fmt=jpeg?sec=1623949493&t=362c1a0f03eb1f6eee0a66d2076fe3fe" width="400px" height="150px" style="box-shadow: 0 0 0px">1. 闭包是什么？<figure class="highlight"><table><tr><td class="code"><pre><code class="hljs">闭包是一个函数，这个函数包含了他外部作用域的一个变量<br></code></pre></td></tr></table></figure>2. demo:<figure class="highlight go"><table><tr><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">adder</span><span class="hljs-params">(x <span class="hljs-keyword">int</span>)</span> <span class="hljs-title">func</span><span class="hljs-params">(<span class="hljs-keyword">int</span>)</span> <span class="hljs-title">int</span></span> &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(y <span class="hljs-keyword">int</span>)</span> <span class="hljs-title">int</span></span> &#123;<br>x += y<br><span class="hljs-keyword">return</span> x<br>&#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>  &#123;<br>ret := adder(<span class="hljs-number">100</span>)<br>ret2 := ret(<span class="hljs-number">200</span>)<br>fmt.Println(ret2)<br>&#125;<br></code></pre></td></tr></table></figure>3. 底层原理：<figure class="highlight markdown"><table><tr><td class="code"><pre><code class="hljs markdown"><span class="hljs-bullet">1.</span> 函数可以作为返回值<br><span class="hljs-bullet">2.</span> 函数内部查找变量的顺序，先在自己内部找，找不到往外层找<br></code></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;img src=&quot;https://gimg2.baidu.com/image_search/src=http%3A%2F%2Fimg-blog.csdnimg.cn%2Fimg_convert%2Fb57c9724cf9167764d0eaf2abc402031.png&amp;ref</summary>
      
    
    
    
    <category term="Go基础" scheme="http://example.com/categories/Go%E5%9F%BA%E7%A1%80/"/>
    
    
    <category term="Go" scheme="http://example.com/tags/Go/"/>
    
  </entry>
  
  <entry>
    <title>Go-指针</title>
    <link href="http://example.com/2021/05/18/go%E5%9F%BA%E7%A1%80/02%E6%8C%87%E9%92%88/"/>
    <id>http://example.com/2021/05/18/go%E5%9F%BA%E7%A1%80/02%E6%8C%87%E9%92%88/</id>
    <published>2021-05-18T13:57:36.000Z</published>
    <updated>2021-05-19T12:36:04.080Z</updated>
    
    <content type="html"><![CDATA[<img src="https://gimg2.baidu.com/image_search/src=http%3A%2F%2Fimg-blog.csdnimg.cn%2Fimg_convert%2Fb57c9724cf9167764d0eaf2abc402031.png&refer=http%3A%2F%2Fimg-blog.csdnimg.cn&app=2002&size=f9999,10000&q=a80&n=0&g=0n&fmt=jpeg?sec=1623949493&t=362c1a0f03eb1f6eee0a66d2076fe3fe" width="400px" height="150px" style="box-shadow: 0 0 0px"><ol><li>变量、指针地址、指针变量、取地址、取值的相互关系：<ul><li>对变量进行取地址（&amp;）操作，可以获得这个变量的指针变量</li><li>指针变量的值是指针地址</li><li>对指针变量进行取值（*）操作，可以获得指针变量指向的原变量的值<figure class="highlight awk"><table><tr><td class="code"><pre><code class="hljs awk">   <span class="hljs-regexp">//</span>变量<br>   n := <span class="hljs-number">18</span><br>   <span class="hljs-regexp">//</span>指针变量<br>p := &amp;n<br><span class="hljs-regexp">//</span>新变量，值为原变量的值<br> m := *p<br></code></pre></td></tr></table></figure></li></ul></li><li>相关函数<ul><li>new：很少用，一般用来给基本数据类型申请内存（string/int…），返回对应类型的指针（*string/*int）<figure class="highlight axapta"><table><tr><td class="code"><pre><code class="hljs axapta">   <span class="hljs-comment">//new 函数申请一个内存地址</span><br>   <span class="hljs-built_in">var</span> a2 = <span class="hljs-keyword">new</span>(<span class="hljs-built_in">int</span>)<br><span class="hljs-comment">//赋值</span><br>*a2 =<span class="hljs-number">100</span><br></code></pre></td></tr></table></figure></li><li>make：用于内存分配，用于slice，map以及chan申请内存，返回对应这三个类型本身（引用类型）</li></ul></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;img src=&quot;https://gimg2.baidu.com/image_search/src=http%3A%2F%2Fimg-blog.csdnimg.cn%2Fimg_convert%2Fb57c9724cf9167764d0eaf2abc402031.png&amp;ref</summary>
      
    
    
    
    <category term="Go基础" scheme="http://example.com/categories/Go%E5%9F%BA%E7%A1%80/"/>
    
    
    <category term="Go" scheme="http://example.com/tags/Go/"/>
    
  </entry>
  
  <entry>
    <title>Go-切片</title>
    <link href="http://example.com/2021/05/18/go%E5%9F%BA%E7%A1%80/01%E5%88%87%E7%89%87/"/>
    <id>http://example.com/2021/05/18/go%E5%9F%BA%E7%A1%80/01%E5%88%87%E7%89%87/</id>
    <published>2021-05-18T12:33:36.000Z</published>
    <updated>2021-05-19T12:35:43.330Z</updated>
    
    <content type="html"><![CDATA[<img src="https://gimg2.baidu.com/image_search/src=http%3A%2F%2Fimg-blog.csdnimg.cn%2Fimg_convert%2Fb57c9724cf9167764d0eaf2abc402031.png&refer=http%3A%2F%2Fimg-blog.csdnimg.cn&app=2002&size=f9999,10000&q=a80&n=0&g=0n&fmt=jpeg?sec=1623949493&t=362c1a0f03eb1f6eee0a66d2076fe3fe" width="400px" height="150px" style="box-shadow: 0 0 0px"><ol><li><ul><li>切片不保存具体的值，</li><li>切片对应一个底层数组</li><li>底层数组占用一块连续的内存</li></ul></li><li>切片的容量是指底层数组的第一个元素到最后一个元素的数量</li><li>切片是引用类型，指向了底层的一个数组</li><li>切片的本质：就是一个框，框住了一块连续的内存，属于引用类型</li><li>相关函数<ul><li>切片初始化<figure class="highlight ini"><table><tr><td class="code"><pre><code class="hljs ini"><span class="hljs-attr">s1</span> = []int&#123;<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>&#125;<br></code></pre></td></tr></table></figure></li><li>由数组得到切片<figure class="highlight go"><table><tr><td class="code"><pre><code class="hljs go">   a1 := [...]<span class="hljs-keyword">int</span>&#123;<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>&#125;<br>s3 := a1[<span class="hljs-number">0</span>:<span class="hljs-number">4</span>] <span class="hljs-comment">//切割0-4，左包含右不包含</span><br></code></pre></td></tr></table></figure></li><li>make<figure class="highlight go"><table><tr><td class="code"><pre><code class="hljs go"><span class="hljs-comment">//创建一个长度为5，容量为10的切片</span><br><span class="hljs-comment">//int默认为0，string默认为“”</span><br>s1 := <span class="hljs-built_in">make</span>([]<span class="hljs-keyword">int</span>,<span class="hljs-number">5</span>,<span class="hljs-number">10</span>)<br></code></pre></td></tr></table></figure></li><li>append<figure class="highlight go"><table><tr><td class="code"><pre><code class="hljs go">   s1 := []<span class="hljs-keyword">string</span>&#123;<span class="hljs-string">&quot;北京&quot;</span>,<span class="hljs-string">&quot;上海&quot;</span>,<span class="hljs-string">&quot;深圳&quot;</span>&#125;<br>   <span class="hljs-comment">//如果超出切片的容量，数组扩容为原来的两倍</span><br>s2 := <span class="hljs-built_in">append</span>(s1, <span class="hljs-string">&quot;成都&quot;</span>)<br><span class="hljs-comment">//如果超出切片的容量，扩容一倍也不够，数组直接扩容到最终的大小</span><br>s3 := <span class="hljs-built_in">append</span>(s1, <span class="hljs-string">&quot;成都&quot;</span>,<span class="hljs-string">&quot;北京1&quot;</span>,<span class="hljs-string">&quot;上海1&quot;</span>,<span class="hljs-string">&quot;深圳1&quot;</span>)<br></code></pre></td></tr></table></figure></li><li>copy<figure class="highlight go"><table><tr><td class="code"><pre><code class="hljs go">   a1 := []<span class="hljs-keyword">int</span>&#123;<span class="hljs-number">1</span>,<span class="hljs-number">3</span>,<span class="hljs-number">5</span>&#125;<br>   <span class="hljs-comment">//创建新切片，底层新数组</span><br>a3 := <span class="hljs-built_in">make</span>([]<span class="hljs-keyword">int</span>, <span class="hljs-number">3</span>, <span class="hljs-number">3</span>)<br><span class="hljs-comment">//a1,a3对应2个数组，通过copy只是复制了值，不会改变底层数组的内存地址</span><br><span class="hljs-built_in">copy</span>(a3, a1)<br></code></pre></td></tr></table></figure></li></ul></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;img src=&quot;https://gimg2.baidu.com/image_search/src=http%3A%2F%2Fimg-blog.csdnimg.cn%2Fimg_convert%2Fb57c9724cf9167764d0eaf2abc402031.png&amp;ref</summary>
      
    
    
    
    <category term="Go基础" scheme="http://example.com/categories/Go%E5%9F%BA%E7%A1%80/"/>
    
    
    <category term="Go" scheme="http://example.com/tags/Go/"/>
    
  </entry>
  
</feed>
